<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Token Test</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            height: 100vh;
            margin: 0;
            background-color: #f0f0f0;
        }
        button {
            padding: 10px 20px;
            margin: 5px;
            font-size: 16px;
            cursor: pointer;
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 5px;
        }
        button:hover {
            background-color: #45a049;
        }
        #status {
            margin-top: 20px;
            font-size: 18px;
        }
    </style>
</head>
<body>
    <button onclick="loadData()">Load Data</button>
    <button onclick="saveData()">Save Data</button>
    <div id="status">Status: Waiting...</div>

    <script>
        // Obfuscated token parts (Base64-encoded)
        const part1 = "Z2hwX01rOGRaUzhF";              // ghp_Mk8dZS8E
        const part2 = "bEplWFVIWFRlVlFRTlJJUg==";  // lJeXUHXTeVQQNRIR
        const part3 = "UklMdUJmMlZqN2FS";          // RILuBf2Vj7aR

        // Reassemble token at runtime
        const GITHUB_TOKEN = atob(part1) + atob(part2) + atob(part3);
        const GITHUB_USERNAME = "xioughh";
        const GITHUB_REPO = "RSA-Attendance-Tracker";
        const GITHUB_FILE_PATH = "attendance.json";
        const GITHUB_API_URL = `https://api.github.com/repos/${GITHUB_USERNAME}/${GITHUB_REPO}/contents/${GITHUB_FILE_PATH}`;

        let data = { message: "Initial data" };

        // Update status text
        function updateStatus(message) {
            document.getElementById("status").textContent = `Status: ${message}`;
        }

        // Load data from GitHub
        async function loadData() {
            try {
                updateStatus("Loading...");
                const response = await fetch(GITHUB_API_URL, {
                    method: "GET",
                    headers: {
                        "Authorization": `Bearer ${GITHUB_TOKEN}`,
                        "Accept": "application/vnd.github.v3+json"
                    }
                });
                if (!response.ok) {
                    throw new Error(`HTTP error: ${response.status}`);
                }
                const json = await response.json();
                data = JSON.parse(atob(json.content));
                updateStatus(`Loaded: ${JSON.stringify(data)}`);
            } catch (error) {
                updateStatus(`Load failed: ${error.message}`);
            }
        }

        // Save data to GitHub
        async function saveData() {
            try {
                updateStatus("Saving...");
                // Fetch current SHA (if file exists)
                let sha = null;
                const getResponse = await fetch(GITHUB_API_URL, {
                    method: "GET",
                    headers: {
                        "Authorization": `Bearer ${GITHUB_TOKEN}`,
                        "Accept": "application/vnd.github.v3+json"
                    }
                });
                if (getResponse.ok) {
                    const fileData = await getResponse.json();
                    sha = fileData.sha;
                } else if (getResponse.status !== 404) {
                    throw new Error(`Failed to fetch SHA: ${getResponse.status}`);
                }

                // Update data with timestamp
                data.message = `Updated at ${new Date().toLocaleString()}`;
                const content = btoa(JSON.stringify(data));

                // Save to GitHub
                const response = await fetch(GITHUB_API_URL, {
                    method: "PUT",
                    headers: {
                        "Authorization": `Bearer ${GITHUB_TOKEN}`,
                        "Accept": "application/vnd.github.v3+json",
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify({
                        message: "Update attendance data",
                        content: content,
                        sha: sha
                    })
                });
                if (!response.ok) {
                    throw new Error(`HTTP error: ${response.status}`);
                }
                updateStatus(`Saved: ${JSON.stringify(data)}`);
            } catch (error) {
                updateStatus(`Save failed: ${error.message}`);
            }
        }
    </script>
</body>
</html>
